/*
	假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。
	对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。

	demo1:
		输入: g = [1,2,3], s = [1,1]
		输出: 1
		解释:
		你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
		虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
		所以你应该输出1。

	demo2:
		输入: g = [1,2], s = [1,2,3]
		输出: 2
		解释:
		你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
		你拥有的饼干数量和尺寸都足以让所有孩子满足。
		所以你应该输出2.

	思路: 贪心策略
	1. 先给饼干和小孩数组分别升序排序
	2. 优先大饼干分配给胃口大的小孩，倒序分配




*/

package main

import (
	"fmt"
	"sort"
)

func main() {
	g := []int{1, 2, 7, 10}
	s := []int{1, 3, 5, 9}
	res := findContentChildren(g, s)
	fmt.Println("res: ", res)
}

func findContentChildren(g []int, s []int) int {
	res := 0
	if len(g) == 0 || len(s) == 0 {
		return res
	}

	// 分别给饼干和小孩数组升序排序
	sort.Ints(g) // 小孩升序
	sort.Ints(s) // 饼干升序

	// 使用sIndex控制饼干数组索引
	sIndex := len(s) - 1
	for i := len(g) - 1; i >= 0; i-- {
		// 如果当前饼干可以分配给小孩
		if sIndex >= 0 && s[sIndex] >= g[i] {
			res++
			sIndex--
		}
	}

	return res
}
