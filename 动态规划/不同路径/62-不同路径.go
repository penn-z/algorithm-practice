/**
leetcode 62: 不同路径
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。
问总共有多少条不同的路径？


思路:	DP
1. 确定dp数组及其下标含义
	以左上角为坐标原点, i为纵坐标，j为横坐标
	dp[i][j]定义: 到达(i, j)时，可能出现的不同路径
2. 确定递推公式
	在(i, j)时，可知此时不同路径数量为(i, j-1), (i-1, j)两者不同路径之和
	dp[i][j] = dp[i][j-1] + dp[i-1][j]
3. dp数组如何初始化
	dp[0][0] = 0
	从(0, 0)走到(i, 0)只有1种走法，故dp[i][0] = 1
	从(0, 0)走到(0, j)只有1种走法，故dp[0][j] = 1
4. 确定遍历顺序
	i, j分别顺序递增
5. 举例dp数组，与程序运行的是否一致
*/
package main

func main() {

}

func uniquePaths(m int, n int) int {
	// 机器人从(0, 0)出发，到(m-1, n-1)终点
	if m == 0 && n == 0 {
		return 0
	}

	// 递推公式: dp[i][j] = dp[i][j-1] + dp[i-1][j]
	dp := make([][]int, m)
	for i := range dp {
		dp[i] = make([]int, n)
		dp[i][0] = 1 // 从(0, 0)走到(i, 0)只有1种走法
	}

	for j := 0; j < n; j++ {
		dp[0][j] = 1 // 从(0, 0)走到(0, j)只有1种走法
	}

	for i := 1; i < m; i++ {
		for j := 1; j < n; j++ {
			dp[i][j] = dp[i][j-1] + dp[i-1][j]
		}
	}

	return dp[m-1][n-1]
}
